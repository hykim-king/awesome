<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pcwk.ehr.mapper.MemberMapper">

  <!-- ====================== 공통/회원 기본 CRUD ====================== -->

  <insert id="doSave" parameterType="com.pcwk.ehr.member.domain.MemberDTO">
    INSERT INTO MEMBER (
      USER_ID, PWD, USER_NM, NICK_NM, BIRTH_DT,
      MAIL_ADDR, EMAIL_AUTH_YN, EMAIL_AUTH_TOKEN, USER_GRADE_CD,
      REG_DT, MOD_DT
    ) VALUES (
      #{userId}, #{pwd}, #{userNm}, #{nickNm}, #{birthDt},
      #{mailAddr}, #{emailAuthYn}, #{emailAuthToken}, #{userGradeCd},
      #{regDt}, #{modDt}
    )
  </insert>

  <select id="doSelectOne"
          parameterType="com.pcwk.ehr.member.domain.MemberDTO"
          resultType="com.pcwk.ehr.member.domain.MemberDTO">
    SELECT *
      FROM MEMBER
     WHERE USER_ID = #{userId}
  </select>

  <update id="doUpdate" parameterType="com.pcwk.ehr.member.domain.MemberDTO">
    UPDATE MEMBER
       SET PWD              = #{pwd, jdbcType=VARCHAR},
           USER_NM          = #{userNm, jdbcType=VARCHAR},
           NICK_NM          = #{nickNm, jdbcType=VARCHAR},
           BIRTH_DT         = #{birthDt, jdbcType=VARCHAR},
           MAIL_ADDR        = #{mailAddr, jdbcType=VARCHAR},
           EMAIL_AUTH_YN    = #{emailAuthYn, jdbcType=VARCHAR},
           EMAIL_AUTH_TOKEN = #{emailAuthToken, jdbcType=VARCHAR},
           USER_GRADE_CD    = #{userGradeCd, jdbcType=NUMERIC},
           MOD_DT           = #{modDt, jdbcType=DATE}
     WHERE USER_ID          = #{userId, jdbcType=VARCHAR}
  </update>

  <delete id="doDelete" parameterType="string">
    DELETE FROM MEMBER
     WHERE USER_ID = #{userId}
  </delete>

  <delete id="deleteAll">
    DELETE FROM MEMBER
  </delete>

  <!-- 존재/조회 유틸 -->
  <select id="existsByEmail" parameterType="string" resultType="int">
    SELECT COUNT(1)
      FROM MEMBER
     WHERE UPPER(TRIM(MAIL_ADDR)) = UPPER(TRIM(#{mailAddr}))
  </select>

  <select id="existsById" parameterType="string" resultType="int">
    SELECT COUNT(1)
      FROM MEMBER
     WHERE UPPER(USER_ID) = UPPER(TRIM(#{userId}))
  </select>

  <select id="existsByNick" parameterType="string" resultType="int">
    SELECT COUNT(*)
      FROM MEMBER
     WHERE NICK_NM = #{nickNm}
  </select>

  <select id="findByUserId" parameterType="string"
          resultType="com.pcwk.ehr.member.domain.MemberDTO">
    SELECT USER_ID, PWD, USER_NM, NICK_NM, BIRTH_DT,
           MAIL_ADDR, EMAIL_AUTH_YN, EMAIL_AUTH_TOKEN, USER_GRADE_CD,
           REG_DT, MOD_DT
      FROM MEMBER
     WHERE USER_ID = #{userId}
  </select>

  <select id="findUserId" resultType="string">
    SELECT USER_ID
      FROM MEMBER
     WHERE USER_NM  = #{userNm}
       AND MAIL_ADDR = #{mailAddr}
     ORDER BY REG_DT DESC
     FETCH FIRST 1 ROW ONLY
  </select>

  <!-- 이메일 인증/토큰/비번 재설정 -->
  <select id="findByEmailAuthToken" parameterType="string"
          resultType="com.pcwk.ehr.member.domain.MemberDTO">
    SELECT *
      FROM MEMBER
     WHERE EMAIL_AUTH_TOKEN = #{token}
  </select>

  <update id="updateEmailAuthTokenByEmail">
    UPDATE MEMBER
       SET EMAIL_AUTH_TOKEN = #{token},
           MOD_DT           = SYSDATE
     WHERE MAIL_ADDR        = #{email}
  </update>

  <update id="updateEmailAuthTokenByUserId">
    UPDATE MEMBER
       SET EMAIL_AUTH_TOKEN = #{token},
           MOD_DT           = SYSDATE
     WHERE USER_ID          = #{userId}
  </update>

  <update id="markEmailVerifiedByToken">
    UPDATE MEMBER
       SET EMAIL_AUTH_YN = 'Y',
           MOD_DT        = SYSDATE
     WHERE EMAIL_AUTH_TOKEN = #{token}
  </update>

  <update id="updateResetToken">
    UPDATE MEMBER
       SET EMAIL_AUTH_TOKEN = #{token},
           MOD_DT = SYSDATE
     WHERE USER_ID  = #{userId}
       AND MAIL_ADDR = #{mailAddr}
  </update>

  <update id="updatePasswordByToken">
    UPDATE MEMBER
       SET PWD = #{pwd},
           EMAIL_AUTH_TOKEN = 'USED_' || #{token},
           MOD_DT = SYSDATE
     WHERE EMAIL_AUTH_TOKEN = #{token}
  </update>

  <update id="updatePwdByUserId" parameterType="com.pcwk.ehr.member.domain.MemberDTO">
    UPDATE MEMBER
       SET PWD    = #{pwd},
           MOD_DT = SYSDATE
     WHERE USER_ID = #{userId}
  </update>

  <update id="updateNickNmByUserId" parameterType="com.pcwk.ehr.member.domain.MemberDTO">
    UPDATE MEMBER
       SET NICK_NM = #{nickNm},
           MOD_DT  = SYSDATE
     WHERE USER_ID = #{userId}
  </update>

  <!-- ====================== 관리자 전용 ====================== -->

  <!-- 공통 where (type, keyword, grade) -->
  <sql id="admin_member_where">
    WHERE 1=1
    <if test="type == 'id' and keyword != null and keyword != ''">
      AND UPPER(USER_ID) LIKE UPPER('%' || #{keyword} || '%')
    </if>
    <if test="type == 'nick' and keyword != null and keyword != ''">
      AND UPPER(NICK_NM) LIKE UPPER('%' || #{keyword} || '%')
    </if>
    <if test="grade != null">
      AND USER_GRADE_CD = #{grade}
    </if>
  </sql>

  <!-- 총 개수 -->
  <select id="countMembersForAdmin" parameterType="map" resultType="int">
    SELECT COUNT(*) FROM MEMBER
    <include refid="admin_member_where"/>
  </select>

  <!-- 목록 -->
  <select id="listMembersForAdmin" parameterType="map"
          resultType="com.pcwk.ehr.member.domain.MemberDTO">
    SELECT USER_ID, USER_NM, NICK_NM, MAIL_ADDR, BIRTH_DT,
           USER_GRADE_CD, EMAIL_AUTH_YN, REG_DT, MOD_DT
      FROM MEMBER
    <include refid="admin_member_where"/>
    ORDER BY REG_DT DESC
    OFFSET #{offset} ROWS FETCH NEXT #{limit} ROWS ONLY
  </select>

  <!-- 등급 변경 -->
  <update id="updateGradeByUserId" parameterType="map">
    UPDATE MEMBER
       SET USER_GRADE_CD = #{grade},
           MOD_DT        = SYSDATE
     WHERE USER_ID       = #{userId}
  </update>

  <!-- 일괄 삭제: @Param("ids") List<String> ids -->
  <delete id="deleteMembersByIds">
    DELETE FROM MEMBER
     WHERE USER_ID IN
    <foreach collection="ids" item="id" open="(" separator="," close=")">
      #{id}
    </foreach>
  </delete>

</mapper>
