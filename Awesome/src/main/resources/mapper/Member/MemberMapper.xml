<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pcwk.ehr.mapper.MemberMapper">



    <!-- INSERT -->
    <insert id="doSave" parameterType="com.pcwk.ehr.member.domain.MemberDTO">
        INSERT INTO MEMBER (
            USER_ID, PWD, USER_NM, NICK_NM, BIRTH_DT,
            MAIL_ADDR, EMAIL_AUTH_YN, EMAIL_AUTH_TOKEN, USER_GRADE_CD,
            REG_DT, MOD_DT
        ) VALUES (
            #{userId}, #{pwd}, #{userNm}, #{nickNm}, #{birthDt},
            #{mailAddr}, #{emailAuthYn}, #{emailAuthToken}, #{userGradeCd},
            #{regDt},#{modDt}
        )
    </insert>

    <!-- SELECT -->
    <select id="doSelectOne" parameterType="String" resultType="com.pcwk.ehr.member.domain.MemberDTO">
        SELECT *
        FROM MEMBER
        WHERE USER_ID = #{userId}
    </select>

    <!-- UPDATE -->
    <update id="doUpdate" parameterType="com.pcwk.ehr.member.domain.MemberDTO">
    UPDATE MEMBER
    SET 
        PWD              = #{pwd, jdbcType=VARCHAR},
        USER_NM          = #{userNm, jdbcType=VARCHAR},
        NICK_NM          = #{nickNm, jdbcType=VARCHAR},
        BIRTH_DT         = #{birthDt, jdbcType=VARCHAR},
        MAIL_ADDR        = #{mailAddr, jdbcType=VARCHAR},
        EMAIL_AUTH_YN    = #{emailAuthYn, jdbcType=VARCHAR},
        EMAIL_AUTH_TOKEN = #{emailAuthToken, jdbcType=VARCHAR},
        USER_GRADE_CD    = #{userGradeCd, jdbcType=NUMERIC},
        MOD_DT           = #{modDt, jdbcType=DATE}
    WHERE 
        USER_ID          = #{userId, jdbcType=VARCHAR}
</update>

    <!-- DELETE -->
    <delete id="doDelete" parameterType="String">
        DELETE FROM MEMBER
        WHERE USER_ID = #{userId}
    </delete>

    <delete id="deleteAll">
    DELETE FROM MEMBER
    </delete>
    
    
    <!-- 이메일 토큰으로 사용자 조회 -->
    <select id="findByEmailAuthToken" parameterType="String" resultType="com.pcwk.ehr.member.domain.MemberDTO">
    SELECT *
    FROM MEMBER
    WHERE EMAIL_AUTH_TOKEN = #{token}
    </select>
    
	    
	    <!-- 이메일 기준으로 인증 토큰 갱신 -->
	<update id="updateEmailAuthTokenByEmail">
	  UPDATE MEMBER
	     SET EMAIL_AUTH_TOKEN = #{token},
	         MOD_DT           = SYSDATE
	   WHERE MAIL_ADDR        = #{email}
	</update>
	
	<!-- (선택) userId 기준으로 인증 토큰 갱신 -->
	<update id="updateEmailAuthTokenByUserId">
	  UPDATE MEMBER
	     SET EMAIL_AUTH_TOKEN = #{token},
	         MOD_DT           = SYSDATE
	   WHERE USER_ID          = #{userId}
	</update>
    
    
		<!-- MemberMapper.xml -->
	<update id="markEmailVerifiedByToken">
	  UPDATE MEMBER
	     SET EMAIL_AUTH_YN = 'Y',
	         MOD_DT        = SYSDATE
	   WHERE EMAIL_AUTH_TOKEN = #{token}
	</update>

    
    
    
    <!-- 아이디 중복체크 -->
    <select id="existsById" parameterType="string" resultType="int">
     SELECT COUNT(1)
     FROM MEMBER
     WHERE UPPER(USER_ID) = UPPER(TRIM(#{userId}))
    </select>
    
    <!-- 닉네임 중복 체크 -->
    <select id="existsByNick" parameterType="string" resultType="int">
	  SELECT COUNT(*) 
	  FROM MEMBER 
	  WHERE NICK_NM = #{nickNm}
	</select>
    
     <!-- kinda 아이디로만 사용자 조회 -->
	    <select id="findByUserId" parameterType="string"
	        resultType="com.pcwk.ehr.member.domain.MemberDTO">
			  SELECT USER_ID, PWD, USER_NM, NICK_NM, BIRTH_DT,
			         MAIL_ADDR, EMAIL_AUTH_YN, EMAIL_AUTH_TOKEN, USER_GRADE_CD,
			         REG_DT, MOD_DT
			  FROM MEMBER
			  WHERE USER_ID = #{userId}
	</select>
    
    
    

</mapper>
