<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
        
        <!-- mybatis -->
        <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
            <constructor-arg index="0" ref="sqlSessionFactoryBean"></constructor-arg>
        </bean>
                        
        <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource"></property>
            <property name="configLocation" value="classpath:mybatis-config.xml"></property>
            <property name="mapperLocations" value="classpath:mapper/**/*.xml"></property>
        </bean>
        
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
        </bean>
        
    <tx:annotation-driven transaction-manager="transactionManager" 
    proxy-target-class="true" />
    
    <tx:annotation-driven proxy-target-class="true"
        transaction-manager="transactionManager" />
    <!-- 트랜잭션 Advice -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
       <tx:attributes>
           <!-- 트랜잭션 적용: up으로 시작하는 메서드에 적용한다. 
           name : 트랜잭션 적용 메서드 이름
           read-only : 읽기 전용 여부
           rollback-for : 트랜잭션을 롤백할 예외 
           -->
           <tx:method name="up*" read-only="false" rollback-for="Exception"/>
           
           <!-- 트랜잭션 제외 : up으로 시작하지 않는 모든 메서드-->
           <tx:method name="*" read-only="true"/>
       </tx:attributes>
    </tx:advice>

    <aop:config>
       <aop:pointcut expression="execution( * com.pcwk.ehr..service.*Impl.up*(..))" id="txPointCut"/>
       <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
    </aop:config>



    <!-- Advice : 성능측정 -->
    <bean id="performanceAdvice"
        class="com.pcwk.ehr.cmn.aspect.PerformanceAdvice"></bean>
    <!-- AOP -->
    <aop:config>
        <aop:aspect ref="performanceAdvice">
            <aop:pointcut
                expression="execution(* com.pcwk.ehr..service.*Impl.*(..))"
                id="performancePointcut" />
            <aop:around method="logExecutionTime"
                pointcut-ref="performancePointcut" />
        </aop:aspect>
    </aop:config>

    <bean id="dummyMailService"
        class="com.pcwk.ehr.user.service.DummyMailService"></bean>
    <!-- Naver smtp -->
 <!--    <bean id="MailSenderImpl"
        class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.naver.com"></property>
        <property name="port" value="465"></property>
        <property name="username" value="dlwhd0614@naver.com"></property>
        <property name="password" value="!ntinam6"></property>
        <property name="defaultEncoding" value="utp-8"></property>
        SSL
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.host">smtp.naver.com</prop>
                <prop key="mail.smtp.port">465</prop>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
                <prop key="mail.smtp.ssl.enable">true</prop>
                <prop key="mail.smtp.ssl.trust">smtp.naver.com</prop>
                <prop key="mail.debug">true</prop>
            </props>
        </property>
    </bean> -->

    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- setter injection -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
        <property name="driverClassName"
            value="oracle.jdbc.driver.OracleDriver"></property>
        <property name="jdbcUrl"
            value="jdbc:oracle:thin:@192.168.100.123:1521:XE"></property>
        <property name="username" value="scott"></property>
        <property name="password" value="pcwk"></property>
        <!-- Optional settings -->
        <property name="maximumPoolSize" value="10"></property>
        <property name="minimumIdle" value="5"></property>
        <property name="connectionTimeout" value="30000"></property>
        <property name="idleTimeout" value="600000"></property>
        <property name="maxLifetime" value="1800000"></property>
        <!-- maximumPoolSize : 풀에 유지할 최대 연결 수 minimumIdle : 유휴상태로 유지할수 있는 최대 연결 
            수 connectionTimeout: 연결 시도 시 타임아웃 설정(밀리 초) idleTimeout : 유휴 연결이 풀에서 제거되기 
            전 대기 시간(밀리 초) maxLifetime : 연결이 풀에서 제거되기 전 최대 생존 시간 입니다.(밀리 초) -->
    </bean>



</beans>